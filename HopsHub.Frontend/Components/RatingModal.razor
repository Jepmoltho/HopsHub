@using HopsHub.Frontend.Services
@using HopsHub.Frontend.Services.Interfaces
@using HopsHub.Shared.DTOs
@inject IBeerService _beerService
@inject IRatingService _ratingService
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject IAuthenticationStateService _authenticationStateService

<div class="add-entity-modal modal fade show" style="display:@(IsOpen ? "block" : "none");" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rate a new Beer</h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Write the name of the beer you want to rate. Select it if it exists, otherwise we will create it when you submit your rating.</p>
                <form @onsubmit="HandleSubmit" class="add-rating-form">
                    <div class="form-group pb-3">
                        <label for="beerName">Name</label>
                        <input type="text" id="beerName" class="form-control"
                               @bind="BeerName"
                               @oninput="OnBeerNameInput"
                               required />
                        <ul class="list-group" style="display:@(FilteredBeers.Any() ? "block" : "none");">
                            @foreach (var beer in FilteredBeers.Take(5))
                            {
                                <li class="list-group-item" @onclick="() => SelectBeer(beer)">
                                    @beer.Name - @beer.Brewer.Name
                                </li>
                            }
                        </ul>
                        <div class="create-beer flex-center content-overflow-hidden @CreateBeerBtnAnimationClass">
                            <p class="create-beer-text">Beer not on the list?</p>
                            <button class="beer-btn btn-create" type="button" @onclick="OpenBeerModal">Create it!</button>
                        </div>
                    </div>
                    <div class="form-group pb-3">
                        <label for="score">Score @(Score)/10</label>
                        <div class="star-rating" id="score">
                            @for (int i = 1; i <= 10; i++)
                            {
                                var starValue = i;
                                <svg id="@i"
                                     xmlns="http://www.w3.org/2000/svg"
                                     width="32"
                                     height="32"
                                     fill="@((i <= Score) ? "gold" : "gray")"
                                     class="bi bi-star star-icon"
                                     viewBox="0 0 16 16"
                                     @onclick="() => UpdateScore(starValue)">
                                    <path d="M3.612 15.443c-.386.198-.824-.149-.746-.592l.83-4.73L.173 6.765c-.329-.314-.158-.888.283-.95l4.898-.696L7.538.792c.197-.39.73-.39.927 0l2.184 4.327 4.898.696c.441.062.612.636.282.95l-3.522 3.356.83 4.73c.078.443-.36.79-.746.592L8 13.187l-4.389 2.256z" />
                                </svg>
                            }
                        </div>
                    </div>
                    <div class="form-group pb-3">
                        <label for="comment">Comment</label>
                        <textarea id="comment" class="form-control" @bind="Comment"></textarea>
                    </div>
                    <div class="form-group pb-3">
                        <label for="beerType">Type</label>
                        <input type="text" id="beerType" class="form-control" @bind="BeerType" disabled required />
                    </div>
                    <div class="form-group">
                        <label for="brewerName">Brewer</label>
                        <input type="text" id="brewerName" class="form-control" @bind="BrewerName" disabled required />
                    </div>
                </form>
                @if (!string.IsNullOrEmpty(Message) && MessageType == "text-success")
                {
                    <div class="text-success mt-3 flex-center-vertical content-overflow-hidden @AddedRatingAnimationClass">
                        <svg xmlns="http://www.w3.org/2000/svg" width="32" height="32" fill="currentColor" class="bi bi-check-circle-fill me-2" viewBox="0 0 16 16">
                            <path d="M16 8A8 8 0 1 1 0 8a8 8 0 0 1 16 0m-3.97-3.03a.75.75 0 0 0-1.08.022L7.477 9.417 5.384 7.323a.75.75 0 0 0-1.06 1.06L6.97 11.03a.75.75 0 0 0 1.079-.02l3.992-4.99a.75.75 0 0 0-.01-1.05z" />
                        </svg> @Message
                    </div>
                }
                else
                {
                    <p class="@MessageType">@Message</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="beer-btn btn-neutral" @onclick="CloseModal">Close</button>
                <button type="button" class="beer-btn btn-create" @onclick="HandleSubmit">Submit</button>
            </div>
        </div>
    </div>
</div>

<CreateBeerModal
                 @ref="_createBeerModal"
                 OnBeerCreated="SelectBeer"/>

@code {

    [Parameter]
    public EventCallback OnRatingAdded { get; set; }

    //Data properties
    private List<SelectBeerDTO> BeersInDb { get; set; } = new();
    private List<SelectBeerDTO> FilteredBeers { get; set; } = new();
    private SelectBeerDTO? SelectedBeer { get; set; }

    //State properties
    private bool IsOpen { get; set; } = false;
    private string Message { get; set; } = string.Empty;
    private string MessageType { get; set; } = string.Empty;
    private string AddedRatingAnimationClass { get; set; } = "content-initial";
    private string CreateBeerBtnAnimationClass { get; set; } = "content-initial";

    //Post Rating Properties
    private string BeerName { get; set; } = string.Empty;
    private string BeerType { get; set; } = string.Empty;
    private string BrewerName { get; set; } = string.Empty;
    //private decimal Score { get; set; } = 5;
    private string Comment { get; set; } = string.Empty;


    //Star rating
    private int Score { get; set; } = 5;

    private void UpdateScore(int newScore)
    {
        Score = newScore;
        //StateHasChanged();
    }

    protected override async Task OnInitializedAsync()
    {
        BeersInDb = await _beerService.GetSelectBeerAsync();
    }

    private void OnBeerNameInput(ChangeEventArgs e)
    {
        BeerType = string.Empty;
        BrewerName = string.Empty;
        BeerName = e.Value.ToString() ?? string.Empty;
        FilteredBeers = BeersInDb
                            .Where(b => b.Name.Contains(BeerName, StringComparison.OrdinalIgnoreCase))
                            .ToList();
        CreateBeerBtnAnimationClass = !FilteredBeers.Any() && !string.IsNullOrEmpty(BeerName)
            ? "content-open mt-3"
            : "content-close";
    }

    public void SelectBeer(SelectBeerDTO beer)
    {
        SelectedBeer = beer;
        BeerName = beer.Name;
        BeerType = beer.Type?.Name ?? string.Empty;
        BrewerName = beer.Brewer?.Name ?? string.Empty;
        FilteredBeers.Clear();
        CreateBeerBtnAnimationClass = "content-initial";
    }

    public void OpenModal()
    {
        IsOpen = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        IsOpen = false;
        StateHasChanged();
    }

    public async void HandleSubmit()
    {
        try
        {
            var userId = await _localStorage.GetItemAsync<Guid>("userId");

            var rating = new AddRatingDTO { BeerId = SelectedBeer.Id, UserId = userId, Comment = Comment, Score = Score };

            await _ratingService.PostRatingAsync(rating);

            MessageType = "text-success";
            Message = "Sucessfully added your rating!";
            AddedRatingAnimationClass = "content-open";

            StateHasChanged();

            await Task.Delay(2500);

            await OnRatingAdded.InvokeAsync();

            CloseModal();
        }
        catch (Exception ex)
        {
            MessageType = "text-danger";
            Message = $"Error: {ex.Message}";
            StateHasChanged();
        }
    }

    private CreateBeerModal _createBeerModal;

    private void OpenBeerModal()
    {
        _createBeerModal.OpenModal();
    }
}