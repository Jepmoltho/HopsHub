@using HopsHub.Frontend.Services
@using HopsHub.Frontend.Services.Interfaces
@using HopsHub.Shared.DTOs
@inject IBeerService BeerService
@inject IRatingService RatingService
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject AuthenticationStateService AuthStateService

<div class="rating-modal modal fade show" style="display:@(IsOpen ? "block" : "none");" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Rate a new Beer</h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Write the name of the beer you want to rate. Select it if it exists, otherwise we will create it when you submit your rating.</p>
                <form @onsubmit="HandleSubmit" class="add-rating-form">
                    <div class="form-group">
                        <label for="beerName">Beer Name</label>
                        <input type="text" id="beerName" class="form-control"
                               @bind="BeerName"
                               @oninput="OnBeerNameInput"
                               equired />
                        <ul class="list-group" style="display:@(FilteredBeers.Any() ? "block" : "none");">
                            @foreach (var beer in FilteredBeers)
                            {
                                <li class="list-group-item" @onclick="() => SelectBeer(beer)">
                                    @beer.Name - @beer.Brewer.Name
                                </li>
                            }
                        </ul>
                    </div>
                    <div class="form-group">
                        <label for="beerType">Type</label>
                        <input type="text" id="beerType" class="form-control" @bind="BeerType" disabled />
                    </div>
                    <div class="form-group">
                        <label for="brewerName">Brewer Name</label>
                        <input type="text" id="brewerName" class="form-control" @bind="BrewerName" disabled />
                    </div>
                    <div class="form-group">
                        <label for="score">Score</label>
                        <input type="number" id="score" class="form-control" @bind="Score" min="1" max="10" required />
                    </div>
                    <div class="form-group">
                        <label for="comment">Comment</label>
                        <textarea id="comment" class="form-control" @bind="Comment"></textarea>
                    </div>
                </form>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="HandleSubmit">Submit</button>
            </div>
        </div>
    </div>
</div>

@code {

    //DB items
    private List<BeerBrewerTypeDTO> BeersInDb { get; set; } = new();
    private List<BeerBrewerTypeDTO> FilteredBeers { get; set; } = new();
    private BeerBrewerTypeDTO? SelectedBeer { get; set; }
    private bool IsOpen { get; set; } = false;
    private bool BeerIsSelected { get; set; } = false;
    //Submit Form
    //private int SelectedBeerId { get; set; }
    //private bool ExistingBeerIsSelected { get; set; }
    private string BeerName { get; set; } = string.Empty;
    private string BeerType { get; set; } = string.Empty;
    private string BrewerName { get; set; } = string.Empty;
    private int Score { get; set; } = 5;
    private string Comment { get; set; } = string.Empty;
    //private bool IsSuggestionsVisible { get; set; } = false;


    protected override async Task OnInitializedAsync()
    {
        BeersInDb = await BeerService.GetBeersBrewersTypesAsync();
    }

    private void OnBeerNameInput(ChangeEventArgs e)
    {
        //BeerIsSelected = false; //Unnesesary
        BeerType = string.Empty;
        BrewerName = string.Empty;
        BeerName = e.Value.ToString() ?? string.Empty;
        FilteredBeers = BeersInDb
                            .Where(b => b.Name.Contains(BeerName, StringComparison.OrdinalIgnoreCase))
                            .ToList();
    }

    private void SelectBeer(BeerBrewerTypeDTO beer)
    {
        SelectedBeer = beer;
        BeerName = beer.Name;
        BeerType = beer.Type?.Name ?? string.Empty;
        BrewerName = beer.Brewer?.Name ?? string.Empty;
        FilteredBeers.Clear();
        //BeerIsSelected = true;
    }

    public void OpenModal()
    {
        IsOpen = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        IsOpen = false;
        StateHasChanged();
    }

    public void HandleSubmit()
    {
        //If a beer is selected, submit the rating

        //You cannot submit unless you have selected a beer 
    }
}