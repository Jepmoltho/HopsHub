@using HopsHub.Frontend.Services.Interfaces
@using HopsHub.Shared.DTOs

@inject IBeerService _beerService
@inject IRatingService _ratingService

@namespace HopsHub.Frontend.Components

@if (IsLoading)
{
    <p>Loading beers...</p>
}
else if (ErrorMessage != null)
{
    <p class="text-danger">@ErrorMessage</p>
}
else if (BeersToDisplay.Any())
{
    <div class="beer-list">
        <ul>
            @foreach (var beer in BeersToDisplay)
            {
                <li>
                    <BeerCard Name=@beer.Name
                              Alc=@beer.Alc
                              Score=@beer.Score
                              ImgUrl=""
                              Brewer=""
                              Rank=beer.Rank />
                </li>
            }
        </ul>
    </div>
}
else
{
    <p>No beers found.</p>
}

@code
{
    [Parameter]
    public bool IsPrivate { get; set; } = false;

    [Parameter]
    public string TypeName { get; set; } = "";

    [Parameter]
    public int TypeId { get; set; }

    private List<BeerDTO> BeerDTOs = new();
    private List<RatingDTO> RatingDTOs = new();

    private List<BeerDisplayDTO> BeersToDisplay = new();

    private bool IsLoading = true;
    private string? ErrorMessage;

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        ErrorMessage = null;

        try
        {
            BeersToDisplay.Clear(); // Reset the list to prevent duplicates

            if (IsPrivate)
            {
                if (TypeId == 0)
                {
                    RatingDTOs = await _ratingService.GetAllPrivateRatingsAsync();
                    BeersToDisplay = MapRatingsToBeerDisplayDTO(RatingDTOs);
                }
                else
                {
                    RatingDTOs = await _ratingService.GetAllPrivateRatingsByTypeAsync(TypeId);
                    BeersToDisplay = MapRatingsToBeerDisplayDTO(RatingDTOs);
                }
            }
            else
            {
                if (TypeId == 0)
                {
                    BeerDTOs = await _beerService.GetBeersAsync();
                    BeersToDisplay = MapBeersToBeerDisplayDTO(BeerDTOs);
                }
                else
                {
                    BeerDTOs = await _beerService.GetBeerByTypeAsync(TypeId);
                    BeersToDisplay = MapBeersToBeerDisplayDTO(BeerDTOs);
                }
            }
        }
        catch (UnauthorizedAccessException)
        {
            ErrorMessage = "This user is unauthorized to access private ratings list.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    //protected override async Task OnParametersSetAsync()
    //{
    //    IsLoading = true;
    //    ErrorMessage = null;

    //    try
    //    {
    //        if (IsPrivate)
    //        {
    //            if (TypeId == 0)
    //            {
    //                RatingDTOs = await _ratingService.GetAllPrivateRatingsAsync();
    //                BeersToDisplay = MapRatingsToBeerDisplayDTO(RatingDTOs);
    //            }
    //            else
    //            {
    //                RatingDTOs = await _ratingService.GetAllPrivateRatingsByTypeAsync(TypeId);
    //                BeersToDisplay = MapRatingsToBeerDisplayDTO(RatingDTOs);
    //            }
    //        }
    //        else
    //        {
    //            if (TypeId == 0)
    //            {
    //                BeerDTOs = await _beerService.GetBeersAsync();
    //                BeersToDisplay = MapBeersToBeerDisplayDTO(BeerDTOs);
    //            }
    //            else
    //            {
    //                BeerDTOs = await _beerService.GetBeerByTypeAsync(TypeId);
    //                BeersToDisplay = MapBeersToBeerDisplayDTO(BeerDTOs);
    //            }
    //        }
    //    }
    //    catch (UnauthorizedAccessException)
    //    {
    //        ErrorMessage = "This user is unauthorised to access private ratings list";
    //    }
    //    catch (Exception ex)
    //    {
    //        ErrorMessage = $"Error: {ex.Message}";
    //    }
    //    finally
    //    {
    //        IsLoading = false;
    //    }
    //}
}

@functions
{
    private List<BeerDisplayDTO> MapBeersToBeerDisplayDTO(List<BeerDTO> beerDTOs)
    {

        return beerDTOs.
            OrderByDescending(beer => beer.AverageScore).
            Select((beer, index) => new BeerDisplayDTO
            {
                Name = beer.Name,
                Description = beer.Description,
                Score = beer.AverageScore,
                Alc = beer.Alc,
                TypeId = beer.TypeId,
                BrewerId = beer.BrewerId,
                Rank = index + 1

            })
            .OrderByDescending(beer => beer.Score)
            .ToList();
    }

    private List<BeerDisplayDTO> MapRatingsToBeerDisplayDTO(List<RatingDTO> ratingDTOs)
    {
        var sortedBeers = ratingDTOs
            .OrderByDescending(rating => rating.Score)
            .Select((rating, index) => new BeerDisplayDTO
            {
                Name = rating.Beer.Name,
                Description = "N/A",
                Score = rating.Score,
                Alc = 0,
                TypeId = 0,
                BrewerId = 0,
                Rank = index + 1
            })
            .ToList();

        return sortedBeers;
    }
}