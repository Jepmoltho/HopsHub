@using HopsHub.Frontend.Services.Interfaces
@using HopsHub.Shared.DTOs
@using HopsHub.Frontend.Helpers;
@inject IBeerService _beerService
@inject IRatingService _ratingService
@inject INavigationService _navigationService

@namespace HopsHub.Frontend.Components

@if (IsLoading)
{
    <p>Loading beers...</p>
}
else if (ErrorMessage != null)
{
    <p class="text-danger">@ErrorMessage</p>
}
else if (BeersToDisplay.Any())
{
    <div class="beer-list">
        <ul>
            @foreach (var beer in BeersToDisplay)
            {
                <li>
                    <BeerCard Name=@beer.Name
                              Alc=@beer.Alc
                              Score=@beer.Score
                              ImgUrl=""
                              Brewer=""
                              Rank=beer.Rank />
                </li>
            }
        </ul>
    </div>
}
else
{
    <p>No beers found.</p>
}

@code
{
    [Parameter]
    public bool IsPrivate { get; set; } = false;

    [Parameter]
    public string TypeName { get; set; } = "";

    [Parameter]
    public int TypeId { get; set; }

    private SemaphoreSlim _semaphore = new(1, 1);


    private List<BeerDTO> BeerDTOs = new();
    private List<RatingDTO> RatingDTOs = new();

    private List<BeerDisplayDTO> BeersToDisplay = new();

    private bool IsLoading = true;
    private string? ErrorMessage;

    protected override async Task OnParametersSetAsync()
    {

        await _semaphore.WaitAsync();


        try
        {
            IsLoading = true;
            ErrorMessage = null;
            BeersToDisplay.Clear();


            if (IsPrivate)
            {
                RatingDTOs = await _ratingService.GetAllPrivateRatingsByTypeAsync(TypeId);
                BeersToDisplay = DTOHelper.MapRatingsToBeerDisplayDTO(RatingDTOs); 
            }
            else
            {
                BeerDTOs = await _beerService.GetBeerByTypeAsync(TypeId);
                BeersToDisplay = DTOHelper.MapBeersToBeerDisplayDTO(BeerDTOs); 
            }
        }
        catch (UnauthorizedAccessException)
        {
            ErrorMessage = "This user is unauthorized to access private ratings list.";
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
            _semaphore.Release();
        }
    }

    public async Task ReloadData()
    {
        RatingDTOs = await _ratingService.GetAllPrivateRatingsByTypeAsync(TypeId);
        BeersToDisplay = DTOHelper.MapRatingsToBeerDisplayDTO(RatingDTOs); // MapRatingsToBeerDisplayDTO(RatingDTOs);
        StateHasChanged();
    }
}
