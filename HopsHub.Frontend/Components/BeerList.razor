@using HopsHub.Frontend.Services.Interfaces
@using HopsHub.Shared.DTOs

@inject IBeerService beerService
@inject IRatingService ratingService

@namespace HopsHub.Frontend.Components

@if (IsLoading)
{
    <p>Loading beers...</p>
}
else if (ErrorMessage != null)
{
    <p class="text-danger">@ErrorMessage</p>
}
else if (BeersToDisplay.Any())
{
    <ul>
        @foreach (var beer in BeersToDisplay)
            {
            <li>
                <BeerCard Name=@beer.Name
                          Alc=@beer.Alc
                          Score=@beer.Score
                          ImgUrl=""
                          Brewer="" />
            </li>
            }
    </ul>
}
else
{
    <p>No beers found.</p>
}

@code
{
    [Parameter]
    public bool IsPrivate { get; set; } = false;

    [Parameter]
    public string TypeName { get; set; } = "";

    [Parameter]
    public int TypeId { get; set; } = 0;

    private List<BeerDTO> BeerDTOs = new();
    private List<RatingDTO> RatingDTOs = new();

    //This is what is displayed in any case
    private List<BeerDisplayDTO> BeersToDisplay = new();

    private bool IsLoading = true;
    private string? ErrorMessage;

    protected override async Task OnParametersSetAsync()
    {
        IsLoading = true;
        ErrorMessage = null;

        try
        {
            if (IsPrivate)
            {
                if (TypeId == 0)
                {
                    RatingDTOs = await ratingService.GetAllPrivateRatingsAsync();
                    BeersToDisplay = MapRatingsToBeerDisplayDTO(RatingDTOs);
                }
                else
                {
                    RatingDTOs = await ratingService.GetAllPrivateRatingsByTypeAsync(TypeId);
                    BeersToDisplay = MapRatingsToBeerDisplayDTO(RatingDTOs);
                }
            }
            else
            {
                if (TypeId == 0)
                {
                    BeerDTOs = await beerService.GetBeersAsync();
                    BeersToDisplay = MapBeersToBeerDisplayDTO(BeerDTOs);
                }
                else
                {
                    BeerDTOs = await beerService.GetBeerByTypeAsync(TypeId);
                    BeersToDisplay = MapBeersToBeerDisplayDTO(BeerDTOs);
                }
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }
}

@functions
{
    private List<BeerDisplayDTO> MapBeersToBeerDisplayDTO(List<BeerDTO> beerDTOs)
    {
        return beerDTOs.Select(beer => new BeerDisplayDTO
        {
            Name = beer.Name,
            Description = beer.Description,
            Score = beer.AverageScore, 
            Alc = beer.Alc,
            TypeId = beer.TypeId,
            BrewerId = beer.BrewerId
        }).ToList();
    }

    private List<BeerDisplayDTO> MapRatingsToBeerDisplayDTO(List<RatingDTO> ratingDTOs)
    {
        return ratingDTOs.Select(rating => new BeerDisplayDTO
        {
            Name = rating.Beer.Name, 
            Description = "N/A",   
            Score = rating.Score,  
            Alc = 0, 
            TypeId = 0, 
            BrewerId = 0
        }).ToList();
    }
}