@using HopsHub.Frontend.Services.Interfaces
@using HopsHub.Shared.DTOs

@inject IBeerService _beerService
@inject IRatingService _ratingService
@inject INavigationService _navigationService

@namespace HopsHub.Frontend.Components

@if (IsLoading)
{
    <p>Loading beers...</p>
}
else if (ErrorMessage != null)
{
    <p class="text-danger">@ErrorMessage</p>
}
else if (BeersToDisplay.Any())
{
    <div class="beer-list">
        <ul>
            @foreach (var beer in BeersToDisplay)
            {
                <li>
                    <BeerCard Name=@beer.Name
                              Alc=@beer.Alc
                              Score=@beer.Score
                              ImgUrl=""
                              Brewer=""
                              Rank=beer.Rank />
                </li>
            }
        </ul>
    </div>
}
else
{
    <p>No beers found.</p>
}

@code
{
            [Parameter]
            public bool IsPrivate { get; set; } = false;

            [Parameter]
            public string TypeName { get; set; } = "";

            [Parameter]
            public int TypeId { get; set; }

    private SemaphoreSlim _semaphore = new(1, 1);


        private List<BeerDTO> BeerDTOs = new();
        private List<RatingDTO> RatingDTOs = new();

        private List<BeerDisplayDTO> BeersToDisplay = new();

        private bool IsLoading = true;
        private string? ErrorMessage;

        protected override async Task OnParametersSetAsync()
        {

            await _semaphore.WaitAsync();


            try
            {
                IsLoading = true;
                ErrorMessage = null;
                BeersToDisplay.Clear(); // Reset the list to prevent duplicates


                if (IsPrivate)
                {
                    //Todo: This is the stupidest workaround I have done in a long time. Please find time to solve the real problem of why this component is called twice (one with id 0 and another with id x) when navigated to with an active type from the public list
                    if (!_navigationService.CurrentUri.EndsWith("ratings") && TypeId == 0 &&
                    !_navigationService.CurrentUri.EndsWith("ratings/") && TypeId == 0)
                    {
                        //Dont call the endpoint
                    }
                    else
                    {
                        RatingDTOs = await _ratingService.GetAllPrivateRatingsByTypeAsync(TypeId);
                        BeersToDisplay = MapRatingsToBeerDisplayDTO(RatingDTOs);
                    }
                }
                else
                {
                    if (TypeId == 0)
                    {
                        BeerDTOs = await _beerService.GetBeersAsync();
                        BeersToDisplay = MapBeersToBeerDisplayDTO(BeerDTOs);
                    }
                    else
                    {
                        BeerDTOs = await _beerService.GetBeerByTypeAsync(TypeId);
                        BeersToDisplay = MapBeersToBeerDisplayDTO(BeerDTOs);
                    }
                }
            }
            catch (UnauthorizedAccessException)
            {
                ErrorMessage = "This user is unauthorized to access private ratings list.";
            }
            catch (Exception ex)
            {
                ErrorMessage = $"Error: {ex.Message}";
            }
            finally
            {
                IsLoading = false;
                _semaphore.Release();
            }
        }
    }

@functions
{
    private List<BeerDisplayDTO> MapBeersToBeerDisplayDTO(List<BeerDTO> beerDTOs)
    {

        return beerDTOs.
            OrderByDescending(beer => beer.AverageScore).
            Select((beer, index) => new BeerDisplayDTO
            {
                Name = beer.Name,
                Description = beer.Description,
                Score = beer.AverageScore,
                Alc = beer.Alc,
                TypeId = beer.TypeId,
                BrewerId = beer.BrewerId,
                Rank = index + 1

            })
            .OrderByDescending(beer => beer.Score)
            .ToList();
    }

    private List<BeerDisplayDTO> MapRatingsToBeerDisplayDTO(List<RatingDTO> ratingDTOs)
    {


        var sortedBeers = ratingDTOs
            .OrderByDescending(rating => rating.Score)
            .Select((rating, index) => new BeerDisplayDTO
            {
                Name = rating.Beer.Name,
                Description = "N/A",
                Score = rating.Score,
                Alc = 0,
                TypeId = 0,
                BrewerId = 0,
                Rank = index + 1
            })
            .ToList();

        return sortedBeers;
    }
}