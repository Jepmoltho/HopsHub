@using HopsHub.Shared.DTOs
@using HopsHub.Frontend.Services.Interfaces

@inject IAccountService _accountService

@namespace HopsHub.Frontend.Components

<PageTitle>Create User</PageTitle>
<HeadContent></HeadContent>

<div class="create-user-component mb-4">

    <h3>Create User</h3>


    @if (IsSubmitting)
    {
        <p>Submitting...</p>
    }
    else if (!string.IsNullOrEmpty(Message))
    {
        <p class="text-success">@Message</p>

    }

    <EditForm Model="@CreateUserModel" OnValidSubmit="HandleSubmit">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group mb-2">
            <label for="email">Email</label>
            <InputText id="email-create-user" @bind-Value="CreateUserModel.Email" class="form-control" />
            <ValidationMessage For="@(() => CreateUserModel.Email)" />
        </div>

        <div class="form-group mb-3">
            <label for="password">Password</label>
            <InputText id="password-create-user" @bind-Value="CreateUserModel.Password" class="form-control" type="password" />
            <ValidationMessage For="@(() => CreateUserModel.Password)" />
        </div>

        <button type="submit" class="beer-btn btn-create" disabled="@IsSubmitting">Create User</button>

    </EditForm>

</div>

@code
{
    private CreateUserDTO CreateUserModel = new();
    private bool IsSubmitting = false;
    private string Message = "";
}

@functions
{
    private async Task HandleSubmit()
    {
        IsSubmitting = true;

        try
        {
            await _accountService.CreateUserAsync(CreateUserModel);

            Message = "User Created Sucesfully";
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
        finally
        {
            IsSubmitting = false;
        }
    }
}
