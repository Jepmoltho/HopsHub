@using HopsHub.Frontend.Services
@using HopsHub.Frontend.Services.Interfaces
@using HopsHub.Shared.DTOs
@inject IBeerService _beerService
@inject IRatingService _ratingService
@inject ITypeService _typeService
@inject IBrewerService _brewerService
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject IAuthenticationStateService _authenticationStateService

<div class="add-entity-modal modal fade show" style="display:@(IsOpen ? "block" : "none");" tabindex="-1" role="dialog">
    <div class="modal-dialog" role="document">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Create new Beer</h5>
                <button type="button" class="btn-close" @onclick="CloseModal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Write the name of the beer you want to create in the database.</p>
                <form @onsubmit="HandleSubmit" class="add-beer-form">
                    <div class="form-group">
                        <label for="beerName">Beer Name</label>
                        <input type="text" id="beerName" class="form-control"
                               @bind="BeerName"
                               required />
                    </div>
                    <div class="form-group">
                        <label for="beerType">Type</label>
                        <input type="text" id="beerType" class="form-control" @bind="SelectedType.Name" @onclick="ShowTypeDropdown" required />
                        @if (IsTypeDropdownOpen)
                        {
                        <ul class="list-group" style="display:@(TypesInDb.Any() ? "block" : "none");">
                            @foreach (var type in TypesInDb.Take(20))
                                {
                                <li class="list-group-item" @onclick="() => SelectType(type)">
                                    @type.Name
                                </li>
                                }
                        </ul>
                        }
                    </div>
                    <div class="form-group">
                        <label for="brewerName">Brewer Name</label>
                        <input type="text" id="brewerName" class="form-control" @bind="BrewerName" required />
                    </div>
                    <div class="form-group">
                        <label for="alcoholPct">Alcohol</label>
                        <input type="text" id="alcoholPct" class="form-control" @bind="Alc" required />
                    </div>
                    <div class="form-group">
                        <label for="description">Description</label>
                        <input type="text" id="Description" class="form-control" @bind="Description" required />
                    </div>
                </form>
                @if (!string.IsNullOrEmpty(Message))
                {
                    <p class="@MessageType">@Message</p>
                }
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" @onclick="CloseModal">Close</button>
                <button type="button" class="btn btn-primary" @onclick="HandleSubmit">Submit</button>
            </div>
        </div>
    </div>
</div>

@code {

    //Data properties
    //private List<SelectBeerDTO> BeersInDb { get; set; } = new();
    //private List<SelectBeerDTO> FilteredBeers { get; set; } = new();
    //private SelectBeerDTO? SelectedBeer { get; set; }
    private List<TypeDTO> TypesInDb { get; set; } = new();
    private List<BrewerDTO> BrewerInDb { get; set; } = new();

    private TypeDTO SelectedType { get; set; } = new TypeDTO { Id = 0, Name = "", ShortName = "" };
    private SelectBrewerDTO? SelectedBrewer { get; set; }


    //State properties
    private bool IsOpen { get; set; } = false;
    private bool IsTypeDropdownOpen { get; set; } = false;
    //private bool ShowCreateBeerButton { get; set; } = false;
    private string Message { get; set; } = string.Empty;
    private string MessageType { get; set; } = string.Empty;

    //Post Beer Properties
    private string BeerName { get; set; } = string.Empty;
    private string BeerType { get; set; } = string.Empty;
    private string BrewerName { get; set; } = string.Empty;
    private decimal Alc { get; set; } = 0.0M;
    //private Guid
    //private decimal Score { get; set; } = 5;
    private string Description { get; set; } = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        TypesInDb = await _typeService.GetTypesAsync();
        BrewerInDb = await _brewerService.GetBrewersAsync();
    }

    //private void OnBeerNameInput(ChangeEventArgs e)
    //{
    //    BeerType = string.Empty;
    //    BrewerName = string.Empty;
    //    BeerName = e.Value.ToString() ?? string.Empty;
    //    FilteredBeers = BeersInDb
    //                        .Where(b => b.Name.Contains(BeerName, StringComparison.OrdinalIgnoreCase))
    //                        .ToList();
    //    ShowCreateBeerButton = !FilteredBeers.Any() && !string.IsNullOrEmpty(BeerName);

    //}

    private void SelectType(TypeDTO type)
    {
        SelectedType = type;
        IsTypeDropdownOpen = false;
        StateHasChanged();
    }

    private void ShowTypeDropdown()
    {
        IsTypeDropdownOpen = true;
        StateHasChanged();
    }

    //private void CloseTypeDropdown()
    //{
    //    IsTypeDropdownOpen = false;
    //}

    //private void SelectBrewer(SelectBeerDTO beer)
    //{
    //    SelectedBeer = beer;
    //    BeerName = beer.Name;
    //    BeerType = beer.Type?.Name ?? string.Empty;
    //    BrewerName = beer.Brewer?.Name ?? string.Empty;
    //    FilteredBeers.Clear();
    //    ShowCreateBeerButton = false;
    //}

    public void OpenModal()
    {
        IsOpen = true;
        StateHasChanged();
    }

    private void CloseModal()
    {
        IsOpen = false;
        StateHasChanged();
    }

    public async void HandleSubmit()
    {
        try
        {
            var userId = await _localStorage.GetItemAsync<Guid>("userId");

            //var beer = new AddBeerDTO { Name = BeerName, TypeId = Type }
            //var rating = new AddRatingDTO { BeerId = SelectedBeer.Id, UserId = userId, Comment = Comment, Score = Score };

            //await _ratingService.PostRatingAsync(beer);

            MessageType = "text-message";
            Message = "Sucessfully added your rating!";
        }
        catch (Exception ex)
        {
            MessageType = "text-danger";
            Message = $"Error: {ex.Message}";
        }

        StateHasChanged();
    }
}