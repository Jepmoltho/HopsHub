
@using HopsHub.Shared.DTOs
@using HopsHub.Frontend.Services.Interfaces
@inject Blazored.LocalStorage.ILocalStorageService _localStorage
@inject IAuthenticationStateService _authenticationStateService
@inject IAccountService _accountService
@inject NavigationManager _navigationManager;

<div class="login-component">
    @if (_authenticationStateService.IsLoggedIn)
    {
        <p class="mb-2">You are currently logged in.</p>
        <button class="btn btn-destructive" @onclick="HandleLogout" disabled="@IsSubmitting">Logout</button>
    }
    else
    {
        <h3>Login User</h3>
        <EditForm Model="@LoginModel" OnValidSubmit="HandleLogin">
            <DataAnnotationsValidator />
            <ValidationSummary />
            <div class="form-group mb-2">
                <label for="email">Email</label>
                <InputText id="email" @bind-Value="LoginModel.Email" class="form-control" />
            </div>
            <div class="form-group mb-3">
                <label for="password">Password</label>
                <InputText id="password" @bind-Value="LoginModel.Password" class="form-control" type="password" />
            </div>
            <button type="submit" class="beer-btn btn-create" disabled="@IsSubmitting">Login</button>
        </EditForm>

        @if (!string.IsNullOrEmpty(Message))
        {
            <p class="text-danger">@Message</p>
        }
    }
</div>

@code {
    private LoginDTO LoginModel = new LoginDTO { Email = "user63@test.com", Password = "userPassw0rd!" }; //Change to new(); to delete hardcoded login
    private string Message = "";
    private bool IsSubmitting = false;

    private async Task HandleLogin()
    {
        IsSubmitting = true;

        try
        {
            var result = await _accountService.LoginUserAsync(LoginModel);

            if (!string.IsNullOrEmpty(result.Token))
            {
                await _authenticationStateService.LoginAsync(result.Token, result.UserId);
                Message = "Login successful!";
                //await Task.Delay(2000);
                _navigationManager.NavigateTo("/ratings");
            }
        }
        catch (Exception ex)
        {
            Message = $"Error: {ex.Message}";
        }
        finally
        {
            IsSubmitting = false;
        }
    }

    private async Task HandleLogout()
    {
        IsSubmitting = true;

        try
        {
            await _authenticationStateService.LogoutAsync();
            Message = "Logged out successfully.";
        }
        catch
        {
            Message = "An error occurred during logout.";
        }
        finally
        {
            IsSubmitting = false;
        }
    }
}
