@using HopsHub.Frontend.Components
@using HopsHub.Frontend.Services.Interfaces
@page "/ratings/{TypeName?}"
@inject INavigationService _navigationService
@inject IAuthenticationStateService _authenticationStateService


<PageTitle>My Beers by rank</PageTitle>
<HeadContent></HeadContent>

@if (_authenticationStateService.IsLoggedIn)
{
    <div class="ratings-page">
        <h1>MY BEST RANKED @(string.IsNullOrEmpty(TypeName) ? "BEERS" : TypeName.ToUpper())</h1>

        <BeerList TypeName=@TypeName
                  TypeId=@TypeId
                  IsPrivate=true
                  @ref="_beerList"/>
    </div>

    <button class="beer-btn btn-create add-rating-btn-mobile-position" @onclick="OpenRatingModal">
        Rate New Beer
    </button>

    <RatingModal
                 @ref="_ratingModal"
                 OnRatingAdded="RerenderRatingList"/>
}
else
{
    <p>Must be logged in to see list</p>
    <button class="beer-btn btn-create" @onclick="NavigateToLogin">Login</button>
}

@code {

    [Parameter]
    public string? TypeName { get; set; }

    [Parameter]
    public int TypeId { get; set; }

    private BeerList _beerList;

    protected override async Task OnInitializedAsync()
    {
        await _authenticationStateService.InitializeAsync();
    }

    //Is called when the paramters are set in the URI
    protected override void OnParametersSet()
    {
        TypeId = _navigationService.GetActiveTypeId();
    }

    private void NavigateToLogin()
    {
        _navigationService.NavigateTo("/login");
    }

    private RatingModal _ratingModal;

    private void OpenRatingModal()
    {
        _ratingModal.OpenModal();
    }

    public async void RerenderRatingList()
    {
        TypeId = _navigationService.GetActiveTypeId();
        await _beerList.ReloadData();
        StateHasChanged();
    }
}