@using HopsHub.Frontend.Services.Interfaces
@using HopsHub.Shared.DTOs
@using Microsoft.AspNetCore.Components
@inject IAuthenticationStateService _authenticationStateService
@inherits LayoutComponentBase
@inject ITypeService _typeService


<div class="page">

    <!-- navigation-menu: Left position on desktop. Top position on mobile -->
    <NavMenu />

    <main>

        <!-- beer-type-bar: Always top poition -->
        <div class="beer-type-bar top-row pt-2 pb-3 px-4">
            @if (IsLoading)
            {
                <p>...</p>
            }
            else if (ErrorMessage != null)
            {
                <p class="text-danger">@ErrorMessage</p>
            }
            else if (Types.Any())
            {
                @foreach (var type in Types)
                {
                    @*<a href="@type.Link" class="@(type.Id == CurrentTypeId ? "selected" : "")" @onclick="() => SetCurrentTypeId(type.Id)">
                        @(!string.IsNullOrEmpty(type.ShortName) ? type.ShortName : type.Name)
                    </a>*@
                    <button class="@(type.Id == CurrentTypeId ? "selected" : "")"
                        @onclick="() => NavigateToType(type.Id, type.Name)" id="typeId-@type.Id">
                        @(!string.IsNullOrEmpty(type.ShortName) ? type.ShortName : type.Name)
                    </button>
                }
            }
            else
            {
                <p>No types found</p>
            }
        </div>

        <!-- Components rendered in body -->
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code{

    [Inject]
    private NavigationManager NavigationManager { get; set; } = default!;

    private List<TypeDTO> Types = new();
    private bool IsLoading = true;
    private string? ErrorMessage;
    private int CurrentTypeId { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await _authenticationStateService.InitializeAsync();

        try
        {
            <!-- Step 1: Get types OnIniitialised -->

            //Fill list with types from db
            Types = await _typeService.GetTypesAsync();
            //Insert type with id 0 on index 0 to represent all types
            Types.Insert(0, new TypeDTO { Name = "All", ShortName = "", Id = 0 });
            //Set current type which user initially stands on
            CurrentTypeId = 0;

            //precompute links
            //var currentUri = NavigationManager.Uri.ToLower();
            //var isFromRatingsPage = currentUri.Contains("/ratings");
            //var baseRoute = isFromRatingsPage ? "/ratings" : "";
            //foreach (var type in Types)
            //{
            //    var encodedTypeName = Uri.EscapeDataString(type.Name);
            //    type.Link = type.Id == 0 ? baseRoute : $"{baseRoute}/{encodedTypeName}?typeId={type.Id}";
            //}

        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

}

@functions
{

    private void SetCurrentTypeId(int typeId)
    {
        CurrentTypeId = typeId;
    }
    private void NavigateToType(int typeId, string typeName)
    {
        var encodedTypeName = Uri.EscapeDataString(typeName);

        var currentUri = NavigationManager.Uri.ToLower();
        var isFromRatingsPage = currentUri.Contains("/ratings");

        var baseRoute = isFromRatingsPage ? "/ratings" : "";
        var targetRoute = typeId == 0 ? baseRoute : $"{baseRoute}/{encodedTypeName}?typeId={typeId}";

        NavigationManager.NavigateTo(targetRoute);

        CurrentTypeId = typeId;
    }
}