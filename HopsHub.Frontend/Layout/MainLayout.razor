@using HopsHub.Frontend.Services.Interfaces
@using HopsHub.Shared.DTOs
@using Microsoft.AspNetCore.Components
@inject IAuthenticationStateService _authenticationStateService
@inherits LayoutComponentBase
@inject ITypeService _typeService
@inject INavigationService _navigationService


<div class="page">

    <!-- navigation-menu: Left position on desktop. Top position on mobile -->
    <NavMenu />

    <main>

        @if (_navigationService.TypeBarIsActive)
            {
        <!-- beer-type-bar: Always top poition -->
         <div class="beer-type-bar top-row pt-2 pb-3 px-4">
            @*<div>@ActiveTypeId</div>*@
            @if (IsLoading)
            {
            <p>...</p>
            }
            else if (ErrorMessage != null)
            {
            <p class="text-danger">@ErrorMessage</p>
            }
            else if (Types.Any())
            {
            @foreach (var type in Types)
                {
                <button class="@(type.Id == _navigationService.ActiveTypeId ? "selected" : "")"
                        @onclick="() => _navigationService.NavigateToType(type.Id, type.Name)" id="typeId-@type.Id">
                    @(!string.IsNullOrEmpty(type.ShortName) ? type.ShortName : type.Name)
                </button>
                }
            }
            else
            {
            <p>No types found</p>
            }
            <!-- HERE -->

         </div>
         }

        <!-- Components rendered in body -->
        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code{
    private List<TypeDTO> Types = new();
    private bool IsLoading = true;
    private string? ErrorMessage;

    //public int ActiveTypeId;

    protected override async Task OnInitializedAsync()
    {
        await _authenticationStateService.InitializeAsync();


        // Subscribing to changes in _authenticationStateService:
        // This tells the NavMenu component to call StateHasChanged, triggering a re-render
        // whenever _authenticationStateService signals a change.
        _authenticationStateService.OnChange += StateHasChanged;
        _navigationService.OnChange += StateHasChanged;

        _navigationService.SetTypeBarState();
        //if (_navigationService.IsOnHomePage() || _navigationService.IsOnPageSegment("ratings"))
        //{
        //    _navigationService.SetTypeBarState(true);
        //}

        try
        {
            Types = await _typeService.GetTypesAsync();
            var activeTypeId = _navigationService.GetActiveTypeId(); ///_navigationService.ActiveTypeId; //_navigationService.GetActiveTypeId(); //ActiveTypeId;
            _navigationService.SetActiveTypeId(activeTypeId);
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Error: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    public void Dispose()
    {
        _authenticationStateService.OnChange -= StateHasChanged;
        _navigationService.OnChange -= StateHasChanged;
    }
}
