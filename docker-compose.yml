services:
  db:
    image: mcr.microsoft.com/mssql/server:2022-latest
    container_name: hopshub-db
    environment:
      ACCEPT_EULA: "Y"
      SA_PASSWORD_FILE: /run/secrets/db_password
    secrets:
      - db_password
    ports:
      - "1433:1433"
    volumes:
      - hopshub_sql_data:/var/opt/mssql
    healthcheck:
      test: ["CMD-SHELL", "pidof sqlservr || exit 1"]
      interval: 10s
      timeout: 10s
      retries: 3
    networks:
      - hopshub-network

  backend:
    image: jepmoltho/hopshub:backend-v1.2
    container_name: hopshub-backend
    build:
      context: ./HopsHub.Api
    ports:
      - "8080:8080"
    environment:
      DB_HOST: db
      DB_USER: sa
      DB_PASSWORD_FILE: /run/secrets/db_password
      TESTUSER_PASSWORD_FILE: /run/secrets/testuser_password
      ASPNETCORE_ENVIRONMENT: Production
      SMTP_SERVER: mailhog
      SMTP_PORT: 1025
      SENDER_EMAIL: noreply@hopshub@.com
      SENDER_NAME: HopsHub
    secrets:
      - db_password
      - testuser_password
    networks:
      - hopshub-network
    depends_on:
      - db

  frontend:
    image: jepmoltho/hopshub:frontend-v1.0
    container_name: hopshub-frontend
    environment:
      ASPNETCORE_ENVIRONMENT: Production
    build:
      context: ./HopsHub.Frontend
    ports:
      - "7148:7148"
    networks:
      - hopshub-network
    depends_on:
      - backend

secrets:
  db_password:
    file: ./db_password.secret
  testuser_password:
    file: ./testuser_password.secret

networks:
  hopshub-network:

volumes:
  hopshub_sql_data:
# Todo: Run dotnet database update from dockerfile (which is a runtime command, so it might be tricky)
# Todo: Include the mailserver setup in yml file
# Todo: CI/CD pipelines

# mailhog:
#   image: mailhog/mailhog:latest
#   container_name: hopshub-dev-mailhog
#   ports:
#     - "1025:1025"
#     - "8025:8025"
#   networks:
#     - hopshub-network
#   platform: linux/amd64/v8
